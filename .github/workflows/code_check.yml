name: Python Syntax Check

on:
  pull_request_target:
    types: [opened, synchronize]

concurrency:
  group: code-quality-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.8'
  CACHE_VERSION: 'v1'

jobs:
  detect-changes:
    name: Detect Python File Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      python_files: ${{ steps.filter.outputs.python_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Check for Python file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: shell
          filters: |
            python:
              - '**/*.py'

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config: |
            name: "CodeQL Security Analysis"
            disable-default-queries: false
            queries:
              - uses: security-and-quality
              - uses: security-extended
            paths-ignore:
              - "**/__pycache__/**"
              - "**/node_modules/**"
              - "**/.venv/**"
              - "**/venv/**"
              - "build/**"
              - "dist/**"
              - "**/*.pyc"

      - name: Setup Python for CodeQL
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup uv for CodeQL
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies for CodeQL analysis
        run: |
          uv venv .venv
          source .venv/bin/activate
          uv pip install -r requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
          upload: true

  code-quality:
    name: Code Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v4

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ env.CACHE_VERSION }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ env.CACHE_VERSION }}-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-uv-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-uv-
      - name: Create venv and install dependencies
        run: |
          uv venv .venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install ruff pylint pyright mypy
          echo "工具版本信息:"
          pylint --version
          mypy --version

      - name: Generate tool configurations
        run: |
          # 生成 pyrightconfig.json
          cat > pyrightconfig.json << 'EOF'
          {
            "include": [
              "**/*.py"
            ],
            "exclude": [
              "**/__pycache__",
              "**/node_modules",
              "**/.venv",
              "**/venv",
              "build",
              "dist"
            ],
            "reportMissingImports": "error",
            "reportMissingTypeStubs": "warning",
            "reportImportCycles": "error",
            "reportUnusedImport": "warning",
            "reportUnusedClass": "warning",
            "reportUnusedFunction": "warning",
            "reportUnusedVariable": "warning",
            "reportDuplicateImport": "error",
            "reportOptionalSubscript": "warning",
            "reportOptionalMemberAccess": "warning",
            "reportOptionalCall": "warning",
            "reportOptionalIterable": "warning",
            "reportOptionalContextManager": "warning",
            "reportOptionalOperand": "warning",
            "reportGeneralTypeIssues": "error",
            "reportUntypedFunctionDecorator": "warning",
            "reportUntypedClassDecorator": "warning",
            "reportUntypedBaseClass": "warning",
            "reportUntypedNamedTuple": "warning",
            "reportPrivateUsage": "warning",
            "reportConstantRedefinition": "error",
            "reportIncompatibleMethodOverride": "error",
            "reportIncompatibleVariableOverride": "error",
            "reportOverlappingOverload": "error",
            "reportMissingParameterType": "warning",
            "reportMissingReturnType": "warning",
            "reportUnnecessaryIsInstance": "warning",
            "reportUnnecessaryCast": "warning",
            "reportAssertAlwaysTrue": "warning",
            "reportSelfClsParameterName": "warning",
            "reportImplicitStringConcatenation": "warning",
            "venvPath": ".",
            "venv": ".venv",
            "pythonVersion": "${{ env.PYTHON_VERSION }}",
            "pythonPlatform": "All",
            "executionEnvironments": [
              {
                "root": ".",
                "pythonVersion": "${{ env.PYTHON_VERSION }}",
                "pythonPlatform": "All",
                "extraPaths": [
                  ".",
                  "./config",
                  "./ui",
                  "./view"
                ]
              }
            ],
            "typeCheckingMode": "strict",
            "useLibraryCodeForTypes": true,
            "autoImportCompletions": true,
            "strictListInference": false,
            "strictDictionaryInference": false,
            "strictSetInference": false
          }
          EOF
          cat > pyproject.toml << 'EOF'
          [tool.ruff]
          line-length = 120
          target-version = "py38"
          [tool.ruff.lint]
          select = [
              "E",    # pycodestyle errors
              "W",    # pycodestyle warnings
              "F",    # pyflakes
              "I",    # isort
              "N",    # pep8-naming
              "UP",   # pyupgrade
              "B",    # flake8-bugbear
              "C4",   # flake8-comprehensions
              "SIM",  # flake8-simplify
              "PIE",  # flake8-pie
              "RET",  # flake8-return
              "ARG",  # flake8-unused-arguments
              "PTH",  # flake8-use-pathlib
              "ERA",  # eradicate
              "PL",   # pylint
              "RUF",  # ruff-specific rules
          ]
          ignore = [
              "E501",    # line too long
              "E203",    # whitespace before ':'
              "F841",    # local variable assigned but never used
              "PLR0913", # too many arguments
              "PLR0912", # too many branches
              "PLR0915", # too many statements
              "PLR2004", # magic value used in comparison
              "ARG002",  # unused method argument
              "PTH123",  # pathlib instead of os.path.join
          ]
          
          [tool.ruff.lint.per-file-ignores]
          "__init__.py" = ["F401"]
          "**/migrations/*" = ["E501"]
          EOF
          
          echo "✅ 配置文件生成完成"

      - name: Run Ruff check
        uses: astral-sh/ruff-action@v3
        id: ruff
        if: needs.detect-changes.outputs.python == 'true'
        with:
          args: check ${{ needs.detect-changes.outputs.python_files }}
        continue-on-error: true

      - name: Run Pyright check
        uses: jakebailey/pyright-action@v2
        id: pyright
        if: needs.detect-changes.outputs.python == 'true'
        with:
          annotate: errors
          pylance-version: latest-release
          extra-args: ${{ needs.detect-changes.outputs.python_files }}
          venv-path: .venv
        continue-on-error: true

      - name: Run PyLint check
        id: pylint
        if: needs.detect-changes.outputs.python == 'true'
        continue-on-error: true
        run: |
          source .venv/bin/activate
          echo "运行 PyLint 检查..."
          files="${{ needs.detect-changes.outputs.python_files }}"
          if echo "$files" | xargs pylint --errors-only --disable=no-member,no-name-in-module,E0601,E0606,E1121,E0203,import-error,undefined-variable,used-before-assignment,unresolved-import,relative-beyond-top-level,cyclic-import,duplicate-code,too-many-locals,too-many-arguments,too-many-branches,too-many-statements,too-few-public-methods,too-many-instance-attributes,line-too-long,missing-docstring,invalid-name,broad-except,dict-item-0-or-1,return-in-init,arguments-differ,signature-differs,method-hidden,access-member-before-definition,attribute-defined-outside-init --output-format=text --reports=no > pylint_output.txt 2>&1; then
            if grep -E "(syntax-error|indentation-error|E0001|E0011|E0012|E0100|E0101|E0102|E0103|E0104|E0105|E0107|E0108|E0110|E0111|E0112|E0113|E0114|E0115|E0116|E0117|E0118|E1003|E1004|E1101|E1102|E1111|E1120|E1123|E1124|E1125|E1126|E1127|E1128|E1129|E1130|E1131|E1132|E1133|E1134|E1135|E1136|E1137|E1138|E1139|E1140|E1141)" pylint_output.txt > /dev/null 2>&1; then
              echo "PyLint 发现严重错误"
              echo "has_critical_issues=true" >> $GITHUB_OUTPUT
              echo "has_issues=true" >> $GITHUB_OUTPUT
            else
              echo "has_critical_issues=false" >> $GITHUB_OUTPUT
              echo "has_issues=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "PyLint 发现问题"
            echo "has_critical_issues=true" >> $GITHUB_OUTPUT
            echo "has_issues=true" >> $GITHUB_OUTPUT
          fi

      - name: Run MyPy check
        id: mypy
        if: needs.detect-changes.outputs.python == 'true'
        continue-on-error: true
        run: |
          source .venv/bin/activate
          echo "运行 MyPy 检查..."
          files="${{ needs.detect-changes.outputs.python_files }}"
          
          # 生成文本格式输出
          if echo "$files" | xargs mypy --ignore-missing-imports --no-strict-optional --show-error-codes --disable-error-code=name-defined --disable-error-code=attr-defined --disable-error-code=import --disable-error-code=misc --disable-error-code=no-redef --disable-error-code=var-annotated --disable-error-code=assignment --disable-error-code=return-value --disable-error-code=arg-type --disable-error-code=call-arg --disable-error-code=operator --disable-error-code=index --disable-error-code=union-attr --disable-error-code=has-type --disable-error-code=return --disable-error-code=dict-item --disable-error-code=override --disable-error-code=method-assign --disable-error-code=unreachable --disable-error-code=redundant-expr --disable-error-code=comparison-overlap > mypy_output.txt 2>&1; then
            if grep -E "(syntax error|invalid syntax|unexpected indent|unindent does not match|SyntaxError|IndentationError|TabError)" mypy_output.txt > /dev/null 2>&1; then
              echo "MyPy 发现严重错误"
              echo "has_critical_issues=true" >> $GITHUB_OUTPUT
              echo "has_issues=true" >> $GITHUB_OUTPUT
            else
              echo "MyPy 检查通过（无严重错误）"
              echo "has_critical_issues=false" >> $GITHUB_OUTPUT
              echo "has_issues=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "MyPy 发现问题"
            echo "has_critical_issues=true" >> $GITHUB_OUTPUT
            echo "has_issues=true" >> $GITHUB_OUTPUT
          fi


      - name: Generate report
        id: code-quality
        if: always() && needs.detect-changes.outputs.python == 'true'
        run: |
          run_id="${{ github.run_id }}"
          repo="${{ github.repository }}"
          files="${{ needs.detect-changes.outputs.python_files }}"
          file_count=$(echo "$files" | wc -w)
          if [[ "$file_count" -gt 0 ]]; then
            file_list=$(echo "$files" | tr ' ' '\n' | sed 's/^/\`/' | sed 's/$/\`/' | tr '\n' ',' | sed 's/,$//')
            if [[ -z "$file_list" ]]; then
              file_list="喵?"
            fi
          else
            file_list="喵?"
          fi
          run_url="https://github.com/${repo}/actions/runs/${run_id}"
          repo_url="https://github.com/${repo}"
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            pr_head_sha="${{ github.event.pull_request.head.sha }}"
            commit_msg="\"$(git log -1 --pretty=format:'%s' ${pr_head_sha} | jq -R | sed 's/^"//;s/"$//')\""
            commit_hash=$(git log -1 --pretty=format:'%h' ${pr_head_sha})
            commit_full_hash="${pr_head_sha}"
          else
            commit_msg="\"$(git log -1 --pretty=format:'%s' HEAD | jq -R | sed 's/^"//;s/"$//')\""
            commit_hash=$(git log -1 --pretty=format:'%h' HEAD)
            commit_full_hash=$(git log -1 --pretty=format:'%H' HEAD)
          fi
          short_link="[**${commit_hash}**](${repo_url}/commit/${commit_full_hash})"

          all_passed=true
          has_any_issues=false
          has_critical_issues=false
          has_other_issues=false
          critical_report=""
          other_report=""
          if [[ "${{ steps.pylint.outputs.has_critical_issues }}" == "true" ]]; then
            has_critical_issues=true
            critical_report+="<details>\n"
            critical_report+="<summary>❌ PyLint 严重错误（点我展开）</summary>\n\n"
            critical_report+="\`\`\`\n"
            critical_report+="$(cat pylint_output.txt | grep -E '^[^:]+:[0-9]+:[0-9]+: [EF][0-9]+:' | head -50)\n"
            critical_report+="\`\`\`\n\n"
            critical_report+="</details>\n\n"
          fi
          if [[ "${{ steps.mypy.outputs.has_critical_issues }}" == "true" ]]; then
            has_critical_issues=true
            critical_report+="<details>\n"
            critical_report+="<summary>❌ MyPy 严重错误（点我展开）</summary>\n\n"
            critical_report+="\`\`\`\n"
            critical_report+="$(cat mypy_output.txt | grep -E ': error:' | head -50)\n"
            critical_report+="\`\`\`\n\n"
            critical_report+="</details>\n\n"
          fi
          # 检查是否有任何提示需要显示
          has_pylint_warnings=false
          has_mypy_warnings=false
          
          # 处理 PyLint 提示（排除严重错误）
          if [[ "${{ steps.pylint.outputs.has_issues }}" == "true" ]]; then
            pylint_warnings=$(cat pylint_output.txt | grep -v -E '^[^:]+:[0-9]+:[0-9]+: [EF][0-9]+:' | head -50)
            if [[ -n "$pylint_warnings" ]]; then
              has_other_issues=true
              has_pylint_warnings=true
              other_report+="<details>\n"
              other_report+="<summary>🔍 PyLint 提示（点我展开）</summary>\n\n"
              other_report+="\`\`\`\n"
              other_report+="$pylint_warnings\n"
              other_report+="\`\`\`\n\n"
              other_report+="</details>\n\n"
            fi
          fi
          
          # 处理 MyPy 提示（排除严重错误）
          if [[ "${{ steps.mypy.outputs.has_issues }}" == "true" ]]; then
            mypy_warnings=$(cat mypy_output.txt | grep -v -E ': error:' | head -50)
            if [[ -n "$mypy_warnings" ]]; then
              has_other_issues=true
              has_mypy_warnings=true
              other_report+="<details>\n"
              other_report+="<summary>🔍 MyPy 提示（点我展开）</summary>\n\n"
              other_report+="\`\`\`\n"
              other_report+="$mypy_warnings\n"
              other_report+="\`\`\`\n\n"
              other_report+="</details>\n\n"
            fi
          fi
        
          report="## 🧪 静态检查结果\n\n"
          report+="> 检查已完成([${run_id}](${run_url})),以下为结果~喵~\n\n"
          report+="🕒 **检查时间**：$(date -u '+%Y-%m-%d %H:%M:%S UTC') / $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S UTC+8')\n"
          report+="📝 **触发提交信息**：${short_link}: ${commit_msg}\n"
          report+="📁 **检查的文件数**：${file_count} 个 - ${file_list}\n\n"
          report+=">📊 **SARIF**：报告已生成并上传到 GitHub 安全\n\n"
          if [[ "$has_critical_issues" == "true" ]]; then
            report+="---\n\n"
            report+="## 🚨 严重错误\n\n"
            report+="${critical_report}"
            all_passed=false
            has_any_issues=true
          fi
          
          # 只有当有其他检查内容时才显示
          if [[ -n "$other_report" ]]; then
            report+="---\n\n"
            report+="## 📋 其他检查\n\n"
            report+="${other_report}"
            
            # 如果有其他问题，标记为未通过
            if [[ "$has_other_issues" == "true" ]]; then
              all_passed=false
              has_any_issues=true
            fi
          fi
          
          # 如果完全没有任何问题，添加通过标记
          if [[ "$has_any_issues" == "false" ]]; then
            report+="---\n\n"
            report+="## ✅ 全部检查通过\n\n"
            report+="所有检查都通过了~喵~\n\n"
          fi
          report+="---\n\n"
          report+="**喵**"
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo -e "$report" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "all_passed=$all_passed" >> $GITHUB_OUTPUT
          echo "has_critical_issues=$has_critical_issues" >> $GITHUB_OUTPUT
          echo -e "$report" >> $GITHUB_STEP_SUMMARY

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '静态检查结果'

      - name: Post or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          body: ${{ steps.code-quality.outputs.report }}
          edit-mode: replace
          
      - name: Set check status
        run: |
          if [[ "${{ steps.code-quality.outputs.has_critical_issues }}" == "true" ]]; then
            exit 1
          else
            exit 0
          fi
