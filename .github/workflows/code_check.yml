name: Python Syntax Check

on:
  pull_request_target:
    types: [opened, synchronize]

concurrency:
  group: code-quality-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  PYTHON_VERSION: '3.8'
  CACHE_VERSION: 'v1'

jobs:
  detect-changes:
    name: Get File Changes
    runs-on: ubuntu-latest
    outputs:
      has_python_changes: ${{ steps.changes.outputs.has_python_changes }}
      changed_files: ${{ steps.changes.outputs.changed_files }}
      changed_files_json: ${{ steps.changes.outputs.changed_files_json }}
      files_exist: ${{ steps.files.outputs.files_exist }}
      should_run: ${{ steps.decision.outputs.should_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 0

      - name: Get Python file changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            if [[ "${{ github.event.action }}" == "opened" ]]; then
              base_ref="origin/${{ github.event.pull_request.base.ref }}"
              head_ref="HEAD"
              echo "📋 基准分支：${{ github.event.pull_request.base.ref }}"
              echo "📋 目标分支：${{ github.event.pull_request.head.ref }}"
            elif [[ "${{ github.event.action }}" == "synchronize" ]]; then
              base_ref="${{ github.event.before }}"
              head_ref="${{ github.event.after }}"
              echo "📋 上次提交：${{ github.event.before }}"
              echo "📋 本次提交：${{ github.event.after }}"
            fi
          fi
          changed_files=$(git diff --name-only --diff-filter=ACMRT $base_ref...$head_ref | grep '\.py$' | head -50 || true)
          echo "变更的 Python 文件:"
          echo "$changed_files"
          if [[ "${{ github.event_name }}" == "pull_request_target" && "${{ github.event.action }}" == "synchronize" && -n "$changed_files" ]]; then
            all_pr_files=$(git diff --name-only --diff-filter=ACMRT origin/${{ github.event.pull_request.base.ref }}...HEAD | grep '\.py$' | head -50 || true)
            echo "$all_pr_files"
            analysis_files="$all_pr_files"
          else
            analysis_files="$changed_files"
          fi

          if [[ -n "$changed_files" ]]; then
            echo "has_python_changes=true" >> $GITHUB_OUTPUT
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$analysis_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "changed_files_json=$(echo "$analysis_files" | jq -R -s -c 'split("\n") | map(select(. != ""))')" >> $GITHUB_OUTPUT
          else
            echo "has_python_changes=false" >> $GITHUB_OUTPUT
            echo "changed_files=" >> $GITHUB_OUTPUT
            echo "changed_files_json=[]" >> $GITHUB_OUTPUT
          fi

      - name: Prepare file list
        id: files
        run: |
          files="${{ steps.changes.outputs.changed_files }}"
          if [[ -z "$files" ]]; then
            echo "没有 Python 文件需要检查"
            echo "files_exist=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "files_exist=true" >> $GITHUB_OUTPUT
            echo "检查文件列表:"
            echo "$files"
          fi

      - name: Decide whether to run checks
        id: decision
        run: |
          if [[ "${{ steps.files.outputs.files_exist }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  code-quality:
    name: Code Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v4

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ env.CACHE_VERSION }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ env.CACHE_VERSION }}-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-uv-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-uv-
      - name: Create venv and install dependencies
        run: |
          uv venv .venv
          echo "UV_VENV_PATH=.venv" >> $GITHUB_ENV
          uv pip install -r requirements.txt
          uv pip install ruff pylint pyright mypy
          echo "工具版本信息:"
          .venv/bin/ruff --version || .venv/Scripts/ruff.exe --version
          .venv/bin/pylint --version || .venv/Scripts/pylint.exe --version
          .venv/bin/pyright --version || .venv/Scripts/pyright.exe --version
          .venv/bin/mypy --version || .venv/Scripts/mypy.exe --version

      - name: Run Ruff check
        uses: astral-sh/ruff-action@v3
        id: ruff
        if: needs.detect-changes.outputs.files_exist == 'true'
        with:
          args: check ${{ needs.detect-changes.outputs.changed_files }}
        continue-on-error: true

      - name: Run Pyright check
        uses: jakebailey/pyright-action@v2
        id: pyright
        if: needs.detect-changes.outputs.files_exist == 'true'
        with:
          annotate: errors
          pylance-version: latest-release
          extra-args: ${{ needs.detect-changes.outputs.changed_files }}
        continue-on-error: true

      - name: Run PyLint check
        id: pylint
        if: needs.detect-changes.outputs.files_exist == 'true'
        continue-on-error: true
        run: |
          echo "运行 PyLint 检查..."
          files="${{ needs.detect-changes.outputs.changed_files }}"
          pylint_cmd=".venv/bin/pylint"
          if echo "$files" | xargs $pylint_cmd --errors-only --disable=no-member,no-name-in-module,E0601,E0606,E1121,E0203,import-error,undefined-variable,used-before-assignment,unresolved-import,relative-beyond-top-level,cyclic-import,duplicate-code,too-many-locals,too-many-arguments,too-many-branches,too-many-statements,too-few-public-methods,too-many-instance-attributes,line-too-long,missing-docstring,invalid-name,broad-except,dict-item-0-or-1,return-in-init,arguments-differ,signature-differs,method-hidden,access-member-before-definition,attribute-defined-outside-init --output-format=text --reports=no > pylint_output.txt 2>&1; then
            if grep -E "(syntax-error|indentation-error|E0001|E0011|E0012|E0100|E0101|E0102|E0103|E0104|E0105|E0107|E0108|E0110|E0111|E0112|E0113|E0114|E0115|E0116|E0117|E0118|E1003|E1004|E1101|E1102|E1111|E1120|E1123|E1124|E1125|E1126|E1127|E1128|E1129|E1130|E1131|E1132|E1133|E1134|E1135|E1136|E1137|E1138|E1139|E1140|E1141)" pylint_output.txt > /dev/null 2>&1; then
              echo "PyLint 发现严重错误"
              echo "has_critical_issues=true" >> $GITHUB_OUTPUT
              echo "has_issues=true" >> $GITHUB_OUTPUT
            else
              echo "has_critical_issues=false" >> $GITHUB_OUTPUT
              echo "has_issues=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "PyLint 发现问题"
            echo "has_critical_issues=true" >> $GITHUB_OUTPUT
            echo "has_issues=true" >> $GITHUB_OUTPUT
          fi

      - name: Run MyPy check
        id: mypy
        if: needs.detect-changes.outputs.files_exist == 'true'
        continue-on-error: true
        run: |
          echo "运行 MyPy 检查..."
          files="${{ needs.detect-changes.outputs.changed_files }}"
          mypy_cmd=".venv/bin/mypy"
          if echo "$files" | xargs $mypy_cmd --ignore-missing-imports --no-strict-optional --show-error-codes --disable-error-code=name-defined --disable-error-code=attr-defined --disable-error-code=import --disable-error-code=misc --disable-error-code=no-redef --disable-error-code=var-annotated --disable-error-code=assignment --disable-error-code=return-value --disable-error-code=arg-type --disable-error-code=call-arg --disable-error-code=operator --disable-error-code=index --disable-error-code=union-attr --disable-error-code=has-type --disable-error-code=return --disable-error-code=dict-item --disable-error-code=override --disable-error-code=method-assign --disable-error-code=unreachable --disable-error-code=redundant-expr --disable-error-code=comparison-overlap > mypy_output.txt 2>&1; then
            if grep -E "(syntax error|invalid syntax|unexpected indent|unindent does not match|SyntaxError|IndentationError|TabError)" mypy_output.txt > /dev/null 2>&1; then
              echo "MyPy 发现严重错误"
              echo "has_critical_issues=true" >> $GITHUB_OUTPUT
              echo "has_issues=true" >> $GITHUB_OUTPUT
            else
              echo "MyPy 检查通过（无严重错误）"
              echo "has_critical_issues=false" >> $GITHUB_OUTPUT
              echo "has_issues=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "MyPy 发现问题"
            echo "has_critical_issues=true" >> $GITHUB_OUTPUT
            echo "has_issues=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate report
        id: code-quality
        if: always() && needs.detect-changes.outputs.files_exist == 'true'
        run: |
          run_id="${{ github.run_id }}"
          repo="${{ github.repository }}"
          file_json='${{ needs.detect-changes.outputs.changed_files_json }}'
          file_count=$(echo "$file_json" | jq '. | length')
          file_list=$(echo "$file_json" | jq -r '.[] | "\`" + . + "\`"' | paste -sd ', ' -)
          run_url="https://github.com/${repo}/actions/runs/${run_id}"
          repo_url="https://github.com/${repo}"
          commit_msg="\"$(git log -1 --pretty=format:'%s' HEAD | jq -R | sed 's/^"//;s/"$//')\""
          commit_hash=$(git log -1 --pretty=format:'%h' HEAD)
          commit_full_hash=$(git log -1 --pretty=format:'%H' HEAD)
          short_link="[**${commit_hash}**](${repo_url}/commit/${commit_full_hash})"

          report="## 🧪 静态检查结果\n\n"
          report+="> 检查已完成([${run_id}](${run_url})),以下为结果~喵~\n\n"
          report+="🕒 **检查时间**：$(date -u '+%Y-%m-%d %H:%M:%S UTC')\n"
          report+="📝 **提交信息**：${short_link}: ${commit_msg}\n"
          report+="📁 **检查的文件数**：${file_count} 个 - ${file_list}\n\n"
          all_passed=true
          has_any_issues=false
          has_critical_issues=false
          report+="---\n"
          if [[ "${{ steps.pylint.outputs.has_issues }}" == "true" ]]; then
            report+="<details>\n"
            if [[ "${{ steps.pylint.outputs.has_critical_issues }}" == "true" ]]; then
              report+="<summary>❌ PyLint严重错误（点我展开）</summary>\n\n"
              has_critical_issues=true
            else
              report+="<summary>🔍 PyLint提示（点我展开）</summary>\n\n"
            fi
            report+="\`\`\`\n"
            report+="$(cat pylint_output.txt | head -50)\n"
            report+="\`\`\`\n\n"
            report+="</details>\n\n"
            all_passed=false
            has_any_issues=true
          fi
          if [[ "${{ steps.mypy.outputs.has_issues }}" == "true" ]]; then
            report+="<details>\n"
            if [[ "${{ steps.mypy.outputs.has_critical_issues }}" == "true" ]]; then
              report+="<summary>❌ MyPy严重错误（点我展开）</summary>\n\n"
              has_critical_issues=true
            else
              report+="<summary>🔍 MyPy提示（点我展开）</summary>\n\n"
            fi
            report+="\`\`\`\n"
            report+="$(cat mypy_output.txt | head -50)\n"
            report+="\`\`\`\n\n"
            report+="</details>\n\n"
            all_passed=false
            has_any_issues=true
          fi
          if [[ "$has_any_issues" == "true" ]]; then
            report+="---\n"
          fi
          report+="**喵**"
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo -e "$report" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "all_passed=$all_passed" >> $GITHUB_OUTPUT
          echo "has_critical_issues=$has_critical_issues" >> $GITHUB_OUTPUT
          echo -e "$report" >> $GITHUB_STEP_SUMMARY

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '静态检查结果'

      - name: Post or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          body: ${{ steps.code-quality.outputs.report }}
          edit-mode: replace
          
      - name: Set check status
        run: |
          if [[ "${{ steps.code-quality.outputs.has_critical_issues }}" == "true" ]]; then
            exit 1
          else
            exit 0
          fi
