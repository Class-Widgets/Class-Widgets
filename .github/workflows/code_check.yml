name: Python Syntax Check

on:
  pull_request_target:
    types: [opened, synchronize]
    paths:
      - '**.py'

concurrency:
  group: code-quality-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  PYTHON_VERSION: '3.8'
  CACHE_VERSION: 'v1'

jobs:
  detect-changes:
    name: Detect File Changes
    runs-on: ubuntu-latest
    outputs:
      has_python_changes: ${{ steps.changes.outputs.has_python_changes }}
      changed_files: ${{ steps.changes.outputs.changed_files }}
      changed_files_json: ${{ steps.changes.outputs.changed_files_json }}
      should_run: ${{ steps.decision.outputs.should_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 0

      - name: Detect Python file changes
        id: changes
        run: |
          base_ref="origin/${{ github.event.pull_request.base.ref }}"
          changed_files=$(git diff --name-only --diff-filter=ACMRT $base_ref...HEAD | grep '\.py$' | head -50 || true)
          echo "变更的文件："
          echo "$changed_files"

          if [[ -n "$changed_files" ]]; then
            echo "has_python_changes=true" >> $GITHUB_OUTPUT
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$changed_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "changed_files_json=$(echo "$changed_files" | jq -R -s -c 'split("\n") | map(select(. != ""))')" >> $GITHUB_OUTPUT
          else
            echo "has_python_changes=false" >> $GITHUB_OUTPUT
            echo "changed_files=" >> $GITHUB_OUTPUT
            echo "changed_files_json=[]" >> $GITHUB_OUTPUT
          fi

      - name: Decide whether to run checks
        id: decision
        run: |
          if [[ "${{ steps.changes.outputs.has_python_changes }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run == 'true'
    strategy:
      fail-fast: false
      matrix:
        tool: [ruff, pylint, pyright, mypy]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pyright
            ~/.mypy_cache
          key: ${{ runner.os }}-${{ env.CACHE_VERSION }}-${{ matrix.tool }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-${{ matrix.tool }}-
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          case "${{ matrix.tool }}" in
            "ruff")
              pip install ruff
              ;;
            "pylint")
              pip install pylint
              ;;
            "pyright")
              pip install pyright
              ;;
            "mypy")
              pip install mypy
              ;;
          esac

      - name: Prepare file list
        id: files
        run: |
          files="${{ needs.detect-changes.outputs.changed_files }}"
          if [[ -z "$files" ]]; then
            echo "没有文件需要检查"
            echo "files_exist=false" >> $GITHUB_OUTPUT
          else
            echo "files_exist=true" >> $GITHUB_OUTPUT
            echo "检查文件列表："
            echo "$files"
          fi

      - name: Run Ruff
        if: matrix.tool == 'ruff' && steps.files.outputs.files_exist == 'true'
        uses: astral-sh/ruff-action@v3
        with:
          args: check --output-format=github ${{ needs.detect-changes.outputs.changed_files }}
        continue-on-error: true
        id: ruff

      - name: Store Ruff Results
        if: matrix.tool == 'ruff' && steps.files.outputs.files_exist == 'true'
        run: |
          if [ "${{ steps.ruff.outcome }}" = "failure" ]; then
            echo "RUFF_ISSUES=true" >> $GITHUB_ENV
            echo "ruff_issues=发现问题" >> ruff_result.txt
            echo "has_issues=true" >> $GITHUB_OUTPUT
          else
            echo "RUFF_ISSUES=false" >> $GITHUB_ENV
            echo "ruff_issues=0" >> ruff_result.txt
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Run PyLint
        if: matrix.tool == 'pylint' && steps.files.outputs.files_exist == 'true'
        id: pylint
        continue-on-error: true
        run: |
          echo "🔍 运行 PyLint 检查..."
          files="${{ needs.detect-changes.outputs.changed_files }}"
          if [[ -n "$files" ]]; then
            echo "$files" | xargs pylint \
              --errors-only \
              --disable=no-member,no-name-in-module,E0601,E0606,import-error,no-name-in-module \
              --output-format=text \
              --reports=no > pylint_output.txt 2>&1 || true
            
            if [[ -s pylint_output.txt ]]; then
              echo "发现问题："
              cat pylint_output.txt
              echo "has_issues=true" >> $GITHUB_OUTPUT
            else
              echo "✅ PyLint 检查通过"
              echo "has_issues=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Run Pyright
        if: matrix.tool == 'pyright' && steps.files.outputs.files_exist == 'true'
        uses: jakebailey/pyright-action@v2
        with:
          annotate: errors
          pylance-version: latest-release
          extra-args: ${{ needs.detect-changes.outputs.changed_files }}
        continue-on-error: true
        id: pyright

      - name: Store Pyright Results
        if: matrix.tool == 'pyright' && steps.files.outputs.files_exist == 'true'
        run: |
          if [ "${{ steps.pyright.outcome }}" = "failure" ]; then
            echo "PYRIGHT_ISSUES=true" >> $GITHUB_ENV
            echo "pyright_issues=发现问题" >> pyright_result.txt
            echo "has_issues=true" >> $GITHUB_OUTPUT
          else
            echo "PYRIGHT_ISSUES=false" >> $GITHUB_ENV
            echo "pyright_issues=0" >> pyright_result.txt
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Run MyPy
        if: matrix.tool == 'mypy' && steps.files.outputs.files_exist == 'true'
        id: mypy
        continue-on-error: true
        run: |
          echo "🔍 运行 MyPy 检查..."
          files="${{ needs.detect-changes.outputs.changed_files }}"
          if [[ -n "$files" ]]; then
            echo "$files" | xargs mypy \
              --ignore-missing-imports \
              --no-strict-optional \
              --show-error-codes \
              --disable-error-code=name-defined,attr-defined,import > mypy_output.txt 2>&1 || true
            
            if [[ -s mypy_output.txt ]] && ! grep -q "Success: no issues found" mypy_output.txt; then
              echo "发现问题："
              cat mypy_output.txt
              echo "has_issues=true" >> $GITHUB_OUTPUT
            else
              echo "✅ MyPy 检查通过"
              echo "has_issues=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload check results
        if: always() && steps.files.outputs.files_exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.tool }}-results
          path: ${{ matrix.tool }}_output.txt
          retention-days: 7

  report:
    name: Generate Check Report
    runs-on: ubuntu-latest
    needs: [detect-changes, code-quality]
    if: always() && needs.detect-changes.outputs.should_run == 'true'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: results

      - name: Generate comprehensive report
        id: report
        run: |
          echo "生成评论..."
          
          report="## 🔍 静态检查结果\n\n"
          report+="**检查时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')\n"
          report+="**触发事件**: ${{ github.event_name }}\n"
          report+="**检查文件数**: $(echo '${{ needs.detect-changes.outputs.changed_files_json }}' | jq '. | length')\n\n"
          
          # 检查各工具结果
          tools=("ruff" "pylint" "pyright" "mypy")
          all_passed=true
          
          for tool in "${tools[@]}"; do
            case "$tool" in
              "ruff")
                if [[ -f "ruff_result.txt" ]]; then
                  ruff_issues=$(grep "ruff_issues=" ruff_result.txt | cut -d'=' -f2 || echo "0")
                  if [[ "$ruff_issues" != "0" ]]; then
                    all_passed=false
                  else
                    report+="### ✅ Ruff 检查通过\n\n"
                  fi
                else
                  report+="### ⏭️ Ruff 跳过检查\n\n"
                fi
                ;;
              "pyright")
                if [[ -f "pyright_result.txt" ]]; then
                  pyright_issues=$(grep "pyright_issues=" pyright_result.txt | cut -d'=' -f2 || echo "0")
                  if [[ "$pyright_issues" != "0" ]]; then
                    all_passed=false
                  else
                    report+="### ✅ Pyright 检查通过\n\n"
                  fi
                else
                  report+="### ⏭️ Pyright 跳过检查\n\n"
                fi
                ;;
              *)
                if [[ -f "results/${tool}-results/${tool}_output.txt" ]]; then
                  if [[ -s "results/${tool}-results/${tool}_output.txt" ]]; then
                    report+="### ❌ ${tool^} 发现问题\n\n"
                    report+="<details><summary>查看详情</summary>\n\n"
                    report+="\`\`\`\n"
                    report+="$(cat "results/${tool}-results/${tool}_output.txt" | head -50)\n"
                    report+="\`\`\`\n\n"
                    report+="</details>\n\n"
                    all_passed=false
                  else
                    report+="### ✅ ${tool^} 检查通过\n\n"
                  fi
                else
                  report+="### ⏭️ ${tool^} 跳过检查\n\n"
                fi
                ;;
            esac
          done
          
          if [[ "$all_passed" == "true" ]]; then
            report+="## 🎉 所有检查都通过了！\n\n"
          fi
          
          report+="\n----------\n"
          report+="*喵*"
          
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo -e "$report" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "all_passed=$all_passed" >> $GITHUB_OUTPUT

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '静态检查结果'

      - name: Post or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          body: ${{ steps.report.outputs.report }}
          edit-mode: replace
          
      - name: Set check status
        run: |
          if [[ "${{ steps.report.outputs.all_passed }}" == "true" ]]; then
            exit 0
          else
            exit 1
          fi