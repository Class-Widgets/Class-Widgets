name: Python Syntax Check

on:
  pull_request_target:
    types: [opened, synchronize]
    paths:
      - '**.py'

concurrency:
  group: code-quality-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  PYTHON_VERSION: '3.8'
  CACHE_VERSION: 'v1'

jobs:
  detect-changes:
    name: Detect File Changes
    runs-on: ubuntu-latest
    outputs:
      has_python_changes: ${{ steps.changes.outputs.has_python_changes }}
      changed_files: ${{ steps.changes.outputs.changed_files }}
      changed_files_json: ${{ steps.changes.outputs.changed_files_json }}
      should_run: ${{ steps.decision.outputs.should_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 0

      - name: Detect Python file changes
        id: changes
        run: |
          base_ref="origin/${{ github.event.pull_request.base.ref }}"
          changed_files=$(git diff --name-only --diff-filter=ACMRT $base_ref...HEAD | grep '\.py$' | head -50 || true)
          echo "变更的文件："
          echo "$changed_files"

          if [[ -n "$changed_files" ]]; then
            echo "has_python_changes=true" >> $GITHUB_OUTPUT
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$changed_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "changed_files_json=$(echo "$changed_files" | jq -R -s -c 'split("\n") | map(select(. != ""))')" >> $GITHUB_OUTPUT
          else
            echo "has_python_changes=false" >> $GITHUB_OUTPUT
            echo "changed_files=" >> $GITHUB_OUTPUT
            echo "changed_files_json=[]" >> $GITHUB_OUTPUT
          fi

      - name: Decide whether to run checks
        id: decision
        run: |
          if [[ "${{ steps.changes.outputs.has_python_changes }}" == "true" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-pip-

      - name: Cache code quality tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pyright
            ~/.mypy_cache
            ~/.cache/ruff
            ~/.cache/pylint
          key: ${{ runner.os }}-tools-${{ env.CACHE_VERSION }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-tools-${{ env.CACHE_VERSION }}-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-tools-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-tools-

      - name: Install dependencies and tools
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir ~/.cache/pip -r requirements.txt
          tools=("ruff" "pylint" "pyright" "mypy")
          for tool in "${tools[@]}"; do
            if ! pip show "$tool" > /dev/null 2>&1; then
              pip install --cache-dir ~/.cache/pip "$tool"
            fi
          done
          echo "tool version："
          ruff --version
          pylint --version
          pyright --version
          mypy --version

      - name: Prepare file list
        id: files
        run: |
          files="${{ needs.detect-changes.outputs.changed_files }}"
          if [[ -z "$files" ]]; then
            echo "没有文件需要检查"
            echo "files_exist=false" >> $GITHUB_OUTPUT
          else
            echo "files_exist=true" >> $GITHUB_OUTPUT
            echo "检查文件列表："
            echo "$files"
          fi

      - name: Run Ruff check
        uses: astral-sh/ruff-action@v3
        id: ruff
        if: steps.files.outputs.files_exist == 'true'
        with:
          args: check ${{ needs.detect-changes.outputs.changed_files }}
        continue-on-error: true

      - name: Run Pyright check
        uses: jakebailey/pyright-action@v2
        id: pyright
        if: steps.files.outputs.files_exist == 'true'
        with:
          annotate: errors
          pylance-version: latest-release
          extra-args: ${{ needs.detect-changes.outputs.changed_files }}
        continue-on-error: true

      - name: Run PyLint check
        id: pylint
        if: steps.files.outputs.files_exist == 'true'
        continue-on-error: true
        run: |
          echo "🔍 运行 PyLint 检查..."
          files="${{ needs.detect-changes.outputs.changed_files }}"
          if echo "$files" | xargs pylint --errors-only --disable=no-member,no-name-in-module,E0601,E0606,import-error --output-format=text --reports=no > pylint_output.txt 2>&1 && [[ ! -s pylint_output.txt ]]; then
            echo "✅ PyLint 检查通过"
            echo "has_issues=false" >> $GITHUB_OUTPUT
          else
            echo "❌ PyLint 发现问题"
            echo "has_issues=true" >> $GITHUB_OUTPUT
          fi

      - name: Run MyPy check
        id: mypy
        if: steps.files.outputs.files_exist == 'true'
        continue-on-error: true
        run: |
          echo "🔍 运行 MyPy 检查..."
          files="${{ needs.detect-changes.outputs.changed_files }}"
          if echo "$files" | xargs mypy --ignore-missing-imports --no-strict-optional --show-error-codes --disable-error-code=name-defined --disable-error-code=attr-defined --disable-error-code=import > mypy_output.txt 2>&1 && (grep -q "Success: no issues found" mypy_output.txt || [[ ! -s mypy_output.txt ]]); then
            echo "✅ MyPy 检查通过"
            echo "has_issues=false" >> $GITHUB_OUTPUT
          else
            echo "❌ MyPy 发现问题"
            echo "has_issues=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate report
        id: code-quality
        if: always() && steps.files.outputs.files_exist == 'true'
        run: |
          report="## 🔍 静态检查结果\n\n"
          report+="**检查时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')\n"
          report+="**触发事件**: ${{ github.event_name }}\n"
          report+="**检查文件数**: $(echo '${{ needs.detect-changes.outputs.changed_files_json }}' | jq '. | length')\n\n"
          
          all_passed=true
          
          # 检查 Ruff 结果
          if [[ "${{ steps.ruff.outcome }}" == "failure" ]]; then
            report+="### ❌ Ruff 发现问题\n\n"
            report+="请查看上方的 Problem Matchers 注释获取详细信息。\n\n"
            all_passed=false
          else
            report+="### ✅ Ruff 检查通过\n\n"
          fi
          
          # 检查 Pyright 结果
          if [[ "${{ steps.pyright.outcome }}" == "failure" ]]; then
            report+="### ❌ Pyright 发现问题\n\n"
            report+="请查看上方的 Problem Matchers 注释获取详细信息。\n\n"
            all_passed=false
          else
            report+="### ✅ Pyright 检查通过\n\n"
          fi
          
          # 检查 PyLint 结果
          if [[ "${{ steps.pylint.outputs.has_issues }}" == "true" ]]; then
            report+="### ❌ PyLint 发现问题\n\n"
            report+="<details><summary>查看详情</summary>\n\n"
            report+="\`\`\`\n"
            report+="$(cat pylint_output.txt | head -50)\n"
            report+="\`\`\`\n\n"
            report+="</details>\n\n"
            all_passed=false
          else
            report+="### ✅ PyLint 检查通过\n\n"
          fi
          
          # 检查 MyPy 结果
          if [[ "${{ steps.mypy.outputs.has_issues }}" == "true" ]]; then
            report+="### ❌ MyPy 发现问题\n\n"
            report+="<details><summary>查看详情</summary>\n\n"
            report+="\`\`\`\n"
            report+="$(cat mypy_output.txt | head -50)\n"
            report+="\`\`\`\n\n"
            report+="</details>\n\n"
            all_passed=false
          else
            report+="### ✅ MyPy 检查通过\n\n"
          fi
          
          if [[ "$all_passed" == "true" ]]; then
            report+="## 🎉 所有检查都通过了！\n\n"
          else
            report+="## ⚠️ 发现了一些问题\n\n"
            report+="💡 **提示**: Ruff 和 Pyright 的问题已通过 Problem Matchers 在文件中标注，请查看具体文件位置的注释。\n\n"
          fi
          
          report+="\n----------\n"
          report+="*喵*"
          
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo -e "$report" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "all_passed=$all_passed" >> $GITHUB_OUTPUT

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '静态检查结果'

      - name: Post or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          body: ${{ steps.code-quality.outputs.report }}
          edit-mode: replace
          
      - name: Set check status
        run: |
          if [[ "${{ steps.code-quality.outputs.all_passed }}" == "true" ]]; then
            exit 0
          else
            exit 0
          fi