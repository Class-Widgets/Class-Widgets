name: 构建

on:
  workflow_dispatch:
  push:
    tags:
      - v*

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
 
jobs:
  check_commit:
    runs-on: ubuntu-latest
    outputs:
      has-new-commits: ${{ steps.check-new-commits.has-new-commits }}
    steps:
      - name: Check for new commits today
        id: check-new-commits
        uses: adriangl/check-new-commits-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          seconds: 86400
          branch: 'main'

  builder_matrix:
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86, x64, arm64 ]
        os: [ windows-latest, macos-13, macos-14 ]
        exclude:
          - os: macos-13
            arch: x86
          - os: macos-13
            arch: arm64
          - os: windows-latest
            arch: arm64
          - os: macos-14
            arch: x86
          - os: macos-14
            arch: x64
          - os: windows-latest
            arch: x86
    runs-on: ${{ matrix.os }}
    needs: check_commit
    if: ${{ needs.check_commit.outputs.has-new-commits == 'true' || github.event_name == 'workflow_dispatch' || (startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Setup Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.8.10'
          architecture: ${{ matrix.arch }}
          cache: 'pip' # caching pip dependencies

      - name: Init zip folder
        run: mkdir zip

      - name: Install uv
        run: pip install uv
        
      - name: Install Dependencies with uv
        run: uv pip install -r requirements.txt pyinstaller --system

      - name: Set Build Info
        shell: bash
        run: |
          if [[ "$(uname)" == "Darwin" ]]; then
            build_time=$(date -u -v+8H +"%Y-%m-%d %H:%M")
          else
            build_time=$(date -u -d "+8 hours" +"%Y-%m-%d %H:%M")
          fi
          build_commit="${GITHUB_SHA:0:7}"
          build_branch="${GITHUB_REF_NAME}"
          build_runid="${GITHUB_RUN_ID}"
          build_type="PyInstaller - Release"
          config_path="config/default_config.json"
          config_text=$(cat "$config_path")
          config_text="${config_text//__BUILD_TIME__/$build_time}"
          config_text="${config_text//__BUILD_COMMIT__/$build_commit}"
          config_text="${config_text//__BUILD_BRANCH__/$build_branch}"
          config_text="${config_text//__BUILD_RUNID__/$build_runid}"
          config_text="${config_text//__BUILD_TYPE__/$build_type}"
          printf "%s" "$config_text" > "$config_path"
          echo "🧾 写入的构建信息："
          echo "⏰ BUILD_TIME(UTC+8):   $build_time"
          echo "🔗 COMMIT_HASH: $build_commit"
          echo "🌿 BRANCH:      $build_branch"
          echo "🆔 RUN_ID:      $build_runid"
          echo "🧪 BUILD_TYPE:  $build_type"

      - name: Build (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: bash
        run: |
          pyinstaller \
            --noconfirm \
            --windowed \
            --contents-directory .\
            --name "ClassWidgets" \
            --add-data "LICENSE;." \
            --add-data "audio;audio" \
            --add-data "config;config" \
            --add-data "font;font" \
            --add-data "img;img" \
            --add-data "ui;ui" \
            --add-data "view;view" \
            --hidden-import "pyttsx3.drivers" \
            --hidden-import "comtypes" \
            --icon "./img/favicon.ico" \
            main.py
          mkdir ClassWidgets
          cp -R dist/ClassWidgets/ ClassWidgets/


      - name: Build (macOS)
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          pyinstaller --noconfirm --windowed --contents-directory .\
            --name "ClassWidgets" \
            --add-data "LICENSE:." \
            --add-data "audio:audio" \
            --add-data "config:config" \
            --add-data "font:font" \
            --add-data "img:img" \
            --add-data "ui:ui" \
            --add-data "view:view" \
            --hidden-import "pyttsx3.drivers" \
            --icon "./img/favicon.icns" \
            main.py
          cp -R dist/ClassWidgets.app Class\ Widgets.app

      - name: Package (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          curl -o zip.exe -L http://www.stahlworks.com/dev/zip.exe
          ./zip -r -q "./zip/ClassWidgets-Windows-${{ matrix.arch }} (Unsigned).zip" ClassWidgets

      - name: Package (macOS)
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          zip -r -q "./zip/ClassWidgets-macOS-${{ matrix.arch }}.zip" Class\ Widgets.app

      - name: Upload unsigned application
        if: ${{ matrix.os != 'windows-latest' || !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4.4.2
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: ./zip
      - name: Upload unsigned single file
        if: ${{ matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/') }}
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4.4.2
        with:
          name: windows-${{ matrix.arch }} (Unsigned single - DO NOT use)
          path: ./ClassWidgets/ClassWidgets.exe
      - name: Sign application (Release)
        if: ${{ matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/') }}
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: '2e13633d-4e7d-4462-9091-27536751c84c'
          project-slug: 'Class-Widgets.git'
          signing-policy-slug: 'release-signing'
          github-artifact-id: '${{ steps.upload-unsigned-artifact.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: '.\ClassWidgets'
      - name: Recompress
        if: ${{ matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/') }}
        run: |
          del "zip/ClassWidgets-Windows-${{ matrix.arch }} (Unsigned).zip"
          ./zip -r -q zip/ClassWidgets-Windows-${{ matrix.arch }}.zip ClassWidgets/ClassWidgets
      - name: Upload signed application
        if: ${{ matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4.4.2
        with:
          name: windows-latest-${{ matrix.arch }}
          path: ./zip

  debian:
    runs-on: ubuntu-latest
    needs: check_commit
    if: ${{ needs.check_commit.outputs.has-new-commits == 'true' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}

    steps:
      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache gcc wget zip binutils libglib2.0-dev libfreetype6 libxfixes3 libgssapi-krb5-2 libdbus-1-3 libxext6 libfontconfig1 libxrandr2 libnspr4 libx11-xcb1 libxrender1 libasound2t64 libxkbcommon0 libxtst6 libnss3 libxdamage1 libxcomposite1 libcups2 libwayland-client0 libwayland-cursor0 libcairo2 libcairo-gobject2 libpango-1.0-0 libgtk-3-0 libgdk-pixbuf2.0-0 libxkbcommon-x11-0 libwayland-egl1 libxcb-xinerama0 libxcb-render-util0 libxcb-randr0 libxcb-image0 libxcb-sync1 libxcb-keysyms1 libxcb-shape0 libxcb-xfixes0 libxcb-icccm4 libxcb-glx0 git patchelf
          wget http://ftp.debian.org/debian/pool/main/x/xcb-util/libxcb-util1_0.4.0-1+b1_amd64.deb
          sudo dpkg -i libxcb-util1_0.4.0-1+b1_amd64.deb
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Setup Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.12'
          cache: 'pip' # caching pip dependencies
      - name: Install PyInstaller
        run: |
          pip install uv
          uv pip install -r requirements.txt pyinstaller --system

      - name: Set Build Info
        shell: bash
        run: |
          if [[ "$(uname)" == "Darwin" ]]; then
            build_time=$(date -u -v+8H +"%Y-%m-%d %H:%M")
          else
            build_time=$(date -u -d "+8 hours" +"%Y-%m-%d %H:%M")
          fi
          build_commit="${GITHUB_SHA:0:7}"
          build_branch="${GITHUB_REF_NAME}"
          build_runid="${GITHUB_RUN_ID}"
          build_type="PyInstaller - Release"
          config_path="config/default_config.json"
          config_text=$(cat "$config_path")
          config_text="${config_text//__BUILD_TIME__/$build_time}"
          config_text="${config_text//__BUILD_COMMIT__/$build_commit}"
          config_text="${config_text//__BUILD_BRANCH__/$build_branch}"
          config_text="${config_text//__BUILD_RUNID__/$build_runid}"
          config_text="${config_text//__BUILD_TYPE__/$build_type}"
          printf "%s" "$config_text" > "$config_path"
          echo "🧾 写入的构建信息："
          echo "⏰ BUILD_TIME(UTC+8):   $build_time"
          echo "🔗 COMMIT_HASH: $build_commit"
          echo "🌿 BRANCH:      $build_branch"
          echo "🆔 RUN_ID:      $build_runid"
          echo "🧪 BUILD_TYPE:  $build_type"

      - name: Build
        shell: bash
        run: |
          pyinstaller --noconfirm --contents-directory .\
            --name "ClassWidgets" \
            --add-data "LICENSE:." \
            --add-data "audio:audio" \
            --add-data "config:config" \
            --add-data "font:font" \
            --add-data "img:img" \
            --add-data "ui:ui" \
            --add-data "view:view" \
            --hidden-import "pyttsx3.drivers" \
            main.py

      - name: Package (Debian)
        run: |
          cp -R dist ClassWidgets
          mkdir zip
          zip -r -q zip/ClassWidgets-Debian.zip ClassWidgets

      - name: Upload
        uses: actions/upload-artifact@v4.4.2
        with:
          name: debian-x64
          path: ./zip