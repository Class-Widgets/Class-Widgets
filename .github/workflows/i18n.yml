name: I18n Update

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.ui'
      - '**/*.py'
      - 'i18n/**/*.ts'
      - 'ui/**/i18n/**/*.ts'
  workflow_dispatch:
    inputs:
      update_ts_files:
        description: '是否更新.ts文件'
        required: true
        default: true
        type: boolean
      compile_to_qm:
        description: '编译.ts为.qm文件'
        required: true
        default: true
        type: boolean

concurrency:
  group: i18n-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  detect-changes:
    name: Check File Changes
    runs-on: ubuntu-latest
    outputs:
      has_ui_changes: ${{ steps.detect.outputs.has_ui_changes }}
      has_py_changes: ${{ steps.detect.outputs.has_py_changes }}
      has_ts_changes: ${{ steps.detect.outputs.has_ts_changes }}
      should_update_all: ${{ steps.detect.outputs.should_update_all }}
      should_compile: ${{ steps.detect.outputs.should_compile }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Detect file changes
        id: detect
        shell: bash
        run: |
          has_ui_changes="false"
          has_py_changes="false"
          has_ts_changes="false"
          should_update_all="false"
          should_compile="false"
          if [[ "${{ github.event_name }}" == "push" ]]; then
            changed_files=$(git diff --name-only HEAD~1 HEAD)
            if echo "$changed_files" | grep -q '\.ui$'; then
              has_ui_changes="true"
              echo "[DEBUG] .ui Changes Detected"
            fi
            if echo "$changed_files" | grep -q '\.py$'; then
              has_py_changes="true"
              echo "[DEBUG] .py Changes Detected"
            fi
            if echo "$changed_files" | grep -q '\.ts$'; then
              has_ts_changes="true"
              echo "[DEBUG] .ts Changes Detected"
            fi
            if [[ "$has_ui_changes" == "true" || "$has_py_changes" == "true" || "$has_ts_changes" == "true" ]]; then
              should_update_all="true"
              should_compile="true"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            should_update_all=${{ github.event.inputs.update_ts_files }}
            should_compile="${{ github.event.inputs.compile_to_qm }}"
            echo "[DEBUG] 手动触发 - 是否更新.ts: $should_update_all; 是否编译: $should_compile"
          fi
          echo "has_ui_changes=$has_ui_changes" >> $GITHUB_OUTPUT
          echo "has_py_changes=$has_py_changes" >> $GITHUB_OUTPUT
          echo "has_ts_changes=$has_ts_changes" >> $GITHUB_OUTPUT
          echo "should_update_all=$should_update_all" >> $GITHUB_OUTPUT
          echo "should_compile=$should_compile" >> $GITHUB_OUTPUT
          {
            echo "## 文件变更"
            echo "| 文件类型 | 状态 |"
            echo "|----------|------|"
            echo "| .py | $has_py_changes |"
            echo "| .ui | $has_ui_changes |"
            echo "| .ts | $has_ts_changes |"
            echo "| 更新.ts | $should_update_all |"
            echo "| 是否编译 | $should_compile |"
          } >> $GITHUB_STEP_SUMMARY

  update-translations:
    name: Update .ts files
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.has_ui_changes == 'true' ||
      needs.detect-changes.outputs.has_py_changes == 'true' ||
      needs.detect-changes.outputs.should_update_all == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update ref
        shell: bash
        run: |
          git fetch origin
          git rebase origin/${{ github.ref_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Install PySide6 tools
        run: uv pip install --system PySide6

      - name: Update main .ts files
        if: needs.detect-changes.outputs.has_py_changes == 'true' || needs.detect-changes.outputs.should_update_all == 'true'
        shell: bash
        run: |
          echo "[DEBUG] 更新主程序翻译文件..."
          py_files=$(find . -maxdepth 1 -name "*.py" | tr '\n' ' ')
          ui_files=$(find ./view -name "*.ui" 2>/dev/null | tr '\n' ' ' || echo "")
          if [ -n "$py_files" ] || [ -n "$ui_files" ]; then
            for ts_file in i18n/*.ts; do
              if [ -f "$ts_file" ]; then
                echo "[DEBUG] 更新 $ts_file"
                if [ -n "$py_files" ] && [ -n "$ui_files" ]; then
                  pyside6-lupdate $py_files $ui_files -ts "$ts_file"
                  echo "[DEBUG] 已更新 $ts_file on .py&.ui"
                elif [ -n "$py_files" ]; then
                  pyside6-lupdate $py_files -ts "$ts_file"
                  echo "[DEBUG] 已更新 $ts_file on .py"
                elif [ -n "$ui_files" ]; then
                  pyside6-lupdate $ui_files -ts "$ts_file"
                  echo "[DEBUG] 已更新 $ts_file on .ui"
                fi
              fi
            done
          fi

      - name: Update theme .ts files
        if: needs.detect-changes.outputs.has_ui_changes == 'true' || needs.detect-changes.outputs.should_update_all == 'true'
        shell: bash
        run: |
          for theme_dir in ui/*/; do
            if [ -d "$theme_dir" ]; then
              theme_name=$(basename "$theme_dir")
              echo "[DEBUG] 处理主题: $theme_name"
              ui_files=$(find "$theme_dir" -name "*.ui" -type f | tr '\n' ' ')
              if [ -n "$ui_files" ]; then
                i18n_dir="${theme_dir}i18n"
                mkdir -p "$i18n_dir"
                echo "[DEBUG] 找到 UI 文件: $ui_files"
                for ts_file in "${i18n_dir}"/*.ts; do
                  if [ -f "$ts_file" ]; then
                    echo "[DEBUG] 更新 $ts_file"
                    pyside6-lupdate $ui_files -ts "$ts_file"
                  fi
                done
              else
                echo "[DEBUG] 主题 $theme_name 中未找到 UI 文件"
              fi
            fi
          done

      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v6
        continue-on-error: true
        with:
          commit_message: |
            chore(i18n): 更新翻译文件 (.ts) (Auto-Commit)

            - 初始触发者: ${{ github.actor }}
            - 触发事件: ${{ github.event_name }}
            - 提交哈希: ${{ github.sha }}
            - 工作流运行: ${{ github.run_id }}
            * 由 GitHub Actions 自动生成

            Co-authored-by: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          commit_options: '--signoff'
          file_pattern: 'i18n/*.ts ui/*/i18n/*.ts'
          commit_user_name: 'ChimeYao-bot'
          commit_user_email: 'ChimeYao@outlook.jp'
          commit_author: 'ChimeYao-bot <ChimeYao@outlook.jp>'

  compile-translations:
    name: Compile .ts files
    runs-on: ubuntu-latest
    needs: [detect-changes, update-translations]
    if: always() && needs.detect-changes.outputs.should_compile == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update ref
        shell: bash
        run: |
          git fetch origin
          git rebase origin/${{ github.ref_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Install PySide6 tools
        run: uv pip install --system PySide6

      - name: Compile main .ts files
        shell: bash
        run: |
          for ts_file in i18n/*.ts; do
            if [ -f "$ts_file" ]; then
              qm_file="${ts_file%.ts}.qm"
              echo "[DEBUG] 编译: $(basename "$ts_file") -> $(basename "$qm_file")"
              pyside6-lrelease "$ts_file" -qm "$qm_file"
            fi
          done

      - name: Compile theme .ts files
        shell: bash
        run: |
          for theme_dir in ui/*/; do
            if [ -d "$theme_dir" ]; then
              theme_name=$(basename "$theme_dir")
              i18n_dir="${theme_dir}i18n"
              if [ -d "$i18n_dir" ]; then
                echo "[DEBUG] 处理主题: $theme_name"
                for ts_file in "$i18n_dir"/*.ts; do
                  if [ -f "$ts_file" ]; then
                    qm_file="${ts_file%.ts}.qm"
                    echo "[DEBUG] 编译: $(basename "$ts_file") -> $(basename "$qm_file")"
                    pyside6-lrelease "$ts_file" -qm "$qm_file"
                  fi
                done
              else
                echo "[DEBUG] 主题 $theme_name 没有翻译文件"
              fi
            fi
          done

      - name: Check translation completeness and update config
        shell: bash
        run: |
          mkdir -p config
          existing_config=""
          if [ -f "config/completed_i18n.json" ]; then
            existing_config=$(cat config/completed_i18n.json)
          else
            echo "[DEBUG] 配置文件不存在"
          fi
          completed_main_langs="[]"
          if [ -d "i18n" ]; then
            echo "[DEBUG] 检查Main翻译文件..."
            completed_main_langs="["
            first_main=true
            for ts_file in i18n/*.ts; do
              if [ -f "$ts_file" ]; then
                lang_code=$(basename "$ts_file" .ts)
                if ! grep -q 'type="unfinished"' "$ts_file"; then
                  echo "[DEBUG] main翻译 $lang_code 完整"
                  if [ "$first_main" = true ]; then
                    completed_main_langs="${completed_main_langs}\"$lang_code\""
                    first_main=false
                  else
                    completed_main_langs="${completed_main_langs},\"$lang_code\""
                  fi
                else
                  echo "[DEBUG] main翻译 $lang_code 不完整"
                fi
              fi
            done
            completed_main_langs="${completed_main_langs}]"
          fi

          completed_themes="{}"
          if [ -d "ui" ]; then
            echo "[DEBUG] 检查Theme翻译文件..."
            completed_themes="{"
            first_theme=true
            for theme_dir in ui/*/; do
              if [ -d "$theme_dir" ]; then
                theme_name=$(basename "$theme_dir")
                i18n_dir="${theme_dir}i18n"
                theme_langs="[]"
                if [ -d "$i18n_dir" ]; then
                  echo "[DEBUG] 处理主题: $theme_name"
                  theme_langs="["
                  first_lang=true
                  for ts_file in "$i18n_dir"/*.ts; do
                    if [ -f "$ts_file" ]; then
                      lang_code=$(basename "$ts_file" .ts)
                      if ! grep -q 'type="unfinished"' "$ts_file"; then
                        echo "[DEBUG] 主题 $theme_name 翻译 $lang_code 完整"
                        if [ "$first_lang" = true ]; then
                          theme_langs="${theme_langs}\"$lang_code\""
                          first_lang=false
                        else
                          theme_langs="${theme_langs},\"$lang_code\""
                        fi
                      else
                        echo "[DEBUG] 主题 $theme_name 翻译 $lang_code 不完整"
                      fi
                    fi
                  done
                  theme_langs="${theme_langs}]"
                else
                  echo "[DEBUG] 主题 $theme_name 没有翻译文件"
                fi
                if [ "$first_theme" = true ]; then
                  completed_themes="${completed_themes}\"$theme_name\":$theme_langs"
                  first_theme=false
                else
                  completed_themes="${completed_themes},\"$theme_name\":$theme_langs"
                fi
              fi
            done
            completed_themes="${completed_themes}}"
          fi
          new_translation_data="{\"main\":$completed_main_langs,\"themes\":$completed_themes}"
          existing_translation_data=""
          if [ -n "$existing_config" ]; then
            existing_translation_data=$(echo "$existing_config" | python3 -c "import sys, json; data=json.load(sys.stdin); print(json.dumps(data.get('completed_languages', {}), separators=(',', ':'), sort_keys=True))" 2>/dev/null || echo "")
          fi
          new_translation_data_normalized=$(echo "$new_translation_data" | python3 -c "import sys, json; data=json.loads(sys.stdin.read()); print(json.dumps(data, separators=(',', ':'), sort_keys=True))" 2>/dev/null || echo "$new_translation_data")
          echo "[DEBUG] 现有翻译数据: $existing_translation_data"
          echo "[DEBUG] 新翻译数据: $new_translation_data_normalized"

          if [ "$existing_translation_data" = "$new_translation_data_normalized" ] && [ -n "$existing_translation_data" ]; then
            echo "[DEBUG] 翻译状态未发生变化，跳过文件更新"
            echo "::group::翻译配置(未变更)"
            echo "[DEBUG] 翻译配置无变化"
            if [ -f "config/completed_i18n.json" ]; then
              cat config/completed_i18n.json
            fi
            echo "::endgroup::"
          else
            echo "[DEBUG] 翻译状态发生变化，更新配置文件"
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
            cat > config/completed_i18n.json << EOF
          {
            "last_updated": "$current_time",
            "completed_languages": {
              "main": $completed_main_langs,
              "themes": $completed_themes
            }
          }
          EOF
            echo "::group::翻译配置(已更新)"
            echo "[DEBUG] 已更新翻译配置: config/completed_i18n.json"
            cat config/completed_i18n.json
            echo "::endgroup::"
          fi

      - name: Import GPG key
        id: import-gpg-compile
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Commit compiled and config files
        uses: stefanzweifel/git-auto-commit-action@v6
        continue-on-error: true
        with:
          commit_message: |
            chore(i18n): 编译翻译文件(.qm) (Auto-Commit)
            chore(i18n): 更新翻译可用性 (Auto-Commit)

            - 初始触发者: ${{ github.actor }}
            - 触发事件: ${{ github.event_name }}
            - 提交哈希: ${{ github.sha }}
            - 工作流运行: ${{ github.run_id }}
            * 由 GitHub Actions 自动生成

            Co-authored-by: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          commit_options: '--signoff'
          file_pattern: 'i18n/*.qm ui/*/i18n/*.qm config/completed_i18n.json'
          commit_user_name: 'ChimeYao-bot'
          commit_user_email: 'ChimeYao@outlook.jp'
          commit_author: 'ChimeYao-bot <ChimeYao@outlook.jp>'

  summary:
    name: Update Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, update-translations, compile-translations]
    if: always()
    steps:
      - name: Generate summary
        shell: bash
        run: |
          {
            echo "### 执行状态"
            echo "| 任务 | 状态 |"
            echo "|------|------|"
            if [[ "${{ needs.detect-changes.result }}" == "success" ]]; then
              echo "| 检测变更 | 成功 |"
            else
              echo "| 检测变更 | 失败 |"
            fi
            if [[ "${{ needs.update-translations.result }}" == "success" ]]; then
              echo "| 更新翻译 | 成功 |"
            elif [[ "${{ needs.update-translations.result }}" == "failure" ]]; then
              echo "| 更新翻译 | 失败 |"
            elif [[ "${{ needs.update-translations.result }}" == "skipped" ]]; then
              echo "| 更新翻译 | 跳过 |"
            else
              echo "| 更新翻译 | 取消 |"
            fi
            if [[ "${{ needs.compile-translations.result }}" == "success" ]]; then
              echo "| 编译翻译 | 成功 |"
            elif [[ "${{ needs.compile-translations.result }}" == "failure" ]]; then
              echo "| 编译翻译 | 失败 |"
            elif [[ "${{ needs.compile-translations.result }}" == "skipped" ]]; then
              echo "| 编译翻译 | 跳过 |"
            else
              echo "| 编译翻译 | 取消 |"
            fi
            echo ""
            echo "### 触发信息"
            echo "- **触发事件**: ${{ github.event_name }}"
            echo "- **分支**: ${{ github.ref_name }}"
            echo "- **提交**: ${{ github.sha }}"
            echo "- **执行时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "- **更新.ts文件**: ${{ github.event.inputs.update_ts_files }}"
              echo "- **编译 QM**: ${{ github.event.inputs.compile_to_qm }}"
            fi
            echo ""
            echo "### 变更结果"
            echo "- **Python 文件变更**: ${{ needs.detect-changes.outputs.has_py_changes }}"
            echo "- **UI 文件变更**: ${{ needs.detect-changes.outputs.has_ui_changes }}"
            echo "- **翻译文件变更**: ${{ needs.detect-changes.outputs.has_ts_changes }}"
          } >> $GITHUB_STEP_SUMMARY
